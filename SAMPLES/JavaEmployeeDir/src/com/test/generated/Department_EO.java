/*************************** DO NOT MODIFY THIS FILE **************************
 *
 * Generated by Athena Console. All Rights Reserved by Athena Source (c) 2007 - 2011.
 * www.athenaframework.org
 *
 * Generated on Feb 21, 2011 14:13:16 by Jack (Windows 7 6.1 [x86])
 * DB: Derby 10.6[connection pool - driver class: org.apache.derby.jdbc.EmbeddedDriver, url: jdbc:derby:E:\INSPRISE\AthenaES\Tools\eclipse3.4.1\WORKSPACE\JavaEmployeeDir\empdb;create=true, max active: 10, max idle: 0, max wait time: 5000, connection timeout: 300]
 *
 ******************************************************************************/

package com.test.generated;

import java.util.List;

import org.athenasource.framework.eo.core.EOObject;

/**
 * Generated EO class for Department
 *
 * @version 1
 */
public class Department_EO extends EOObject {

	public static final String META_XSD_VERSION = "2.0"; // META VERSION
	public static final int COLUMN_COUNT = 6; // total number of columns, i.e., attributes
	public static final int ENTITY_ID = 101; // the entity type id. 
	public static final String SYSTEM_NAME = "Department"; // the entity system name. 
	public static final String TABLE_NAME = "Data_Department"; // the table name. 

	// Property names 
	public static final String ATTR_department_ID = "department_ID"; // Primary key
	public static final String ATTR_version = "version"; // Version
	public static final String ATTR_status = "status"; // EO status
	public static final String ATTR_ORG_ID = "ORG_ID"; // Organization
	public static final String ATTR_nameFull = "nameFull"; // Full name
	public static final String ATTR_description = "description"; // Description

	public static final String REL_employees = "employees";

	/**
	 * Gets Department ID (Primary key).
	 * @return Department ID
	 */
	public int getDepartment_ID() {
		return getObject(0) == null ?  -1 : ((Number)getObject(0)).intValue(); 
	}

	/**
	 * Sets Department ID (Primary key).
	 * @param department_ID Department ID
	 */
	public void setDepartment_ID(int department_ID) {
		setObject(0, Integer.valueOf(department_ID)); 
	}

	/**
	 * Gets Version (Version).
	 * @return Version
	 */
	public int getVersion() {
		return getObject(1) == null ?  -1 : ((Number)getObject(1)).intValue(); 
	}

	/**
	 * Sets Version (Version).
	 * @param version Version
	 */
	public void setVersion(int version) {
		setObject(1, Integer.valueOf(version)); 
	}

	/**
	 * Gets Status (EO status).
	 * @return Status
	 */
	public int getStatus() {
		return getObject(2) == null ? (byte)-1 : ((Number)getObject(2)).intValue(); 
	}

	/**
	 * Sets Status (EO status).
	 * @param status Status
	 */
	public void setStatus(int status) {
		setObject(2, Integer.valueOf(status)); 
	}

	/**
	 * Gets Org ID (Organization).
	 * @return Org ID
	 */
	public int getORG_ID() {
		return getObject(3) == null ?  -1 : ((Number)getObject(3)).intValue(); 
	}

	/**
	 * Sets Org ID (Organization).
	 * @param ORG_ID Org ID
	 */
	public void setORG_ID(int ORG_ID) {
		setObject(3, Integer.valueOf(ORG_ID)); 
	}

	/**
	 * Gets Full name (Full name).
	 * @return Full name
	 */
	public String getNameFull() {
		String v = getObject(4, String.class); 
		return v;
	}

	/**
	 * Sets Full name (Full name).
	 * @param nameFull Full name
	 */
	public void setNameFull(String nameFull) {
		setObject(4, nameFull); 
	}

	/**
	 * Gets Description (Description).
	 * @return Description
	 */
	public String getDescription() {
		String v = getObject(5, String.class); 
		return v;
	}

	/**
	 * Sets Description (Description).
	 * @param description Description
	 */
	public void setDescription(String description) {
		setObject(5, description); 
	}

	// -------------------------------------- Relationships --------------------------------------

	/**
	 * [INVERSE] (Complement rel: Employee.department) Gets the collection of Employee in employees
	 * null - null
	 * 
	 * @return the collection of Employee in employees
	 */
	public List<EOObject> getEmployees() { 
		return getRelationshipTargetObjectsList("employees"); 
	}

	/**
	 * [INVERSE] (Complement rel: Employee.department) Adds the specified Employee.
	 * null - null
	 * 
	 * @param employee The Employee to be added.
	 * @return <code>true</code> if added successfully; <code>false</code> if the specified item already in the collection.
	 */
	public boolean addToEmployees(EOObject employee) {
		return addRelationshipTargetObject("employees", employee);
	}

	/**
	 * [INVERSE] (Complement rel: Employee.department) Adds the specified Employee and optionally updates the complement relationship object. 
	 * null - null
	 * 
	 * @param employee The Employee to be added.
	 * @param updateComplementRelationship Whether to update the target object of the complement to-one relationship object to this object.
	 * @return <code>true</code> if added successfully; <code>false</code> if the specified item already in the collection.
	 */
	public boolean addToEmployees(EOObject employee, boolean updateComplementRelationship) {
		return addRelationshipTargetObject("employees", employee, updateComplementRelationship);
	}

	/**
	 * [INVERSE] (Complement rel: Employee.department) Removes the specified Employee.
	 * null - null
	 * 
	 * @param employee The Employee to be removed.
	 * @return <code>true</code> if removed successfully; <code>false</code> if the specified item was not in the collection.
	 */
	public boolean removeFromEmployees(EOObject employee) {
		return removeRelationshipTargetObject("employees", employee);
	}

	/**
	 * [INVERSE] (Complement rel: Employee.department) Removes the specified Employee and optionally updates the complement relationship object. 
	 * null - null
	 * 
	 * @param employee The Employee to be removed.
	 * @param updateComplementRelationship Whether to update the target object of the complement to-one relationship object to null.
	 * @return <code>true</code> if removed successfully; <code>false</code> if the specified item was not in the collection.
	 */
	public boolean removeFromEmployees(EOObject employee, boolean updateComplementRelationship) {
		return removeRelationshipTargetObject("employees", employee, updateComplementRelationship);
	}

}

/********************* DO NOT MODIFY - ATHENA CODE GENERATION LOG *******************
 * @file_type EO CLASS for Java - Java 5
 * @entity_id 101
 * @entity_classname com.test.Department
 * @entity_fingerprint 1f98e5f57d536984e6f94326114fff53
 * @entity_version 1
 * @generated_on 1298268796488
 * @generated_by Jack
 * @generated_platform Windows 7 6.1 [x86]
 ******************************************************************************/