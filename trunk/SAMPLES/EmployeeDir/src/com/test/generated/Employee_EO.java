/*************************** DO NOT MODIFY THIS FILE **************************
 *
 * Generated by Athena Console. All Rights Reserved by Athena Source (c) 2007 - 2010.
 * www.athenaframework.org
 *
 * Generated on Nov 08, 2010 10:47:19 by Jack (Windows 7 6.1 [x86])
 * DB: MySQL 5.0[connection pool - driver class: com.mysql.jdbc.Driver, url: jdbc:mysql://localhost/employeedir?useUnicode=yes&characterEncoding=UTF-8, max active: 10, max idle: 5, max wait time: 5000, connection timeout: 300]
 *
 ******************************************************************************/

package com.test.generated;

import java.util.List;

import org.athenasource.framework.eo.core.EOObject;

import com.test.EmailAccount;

/**
 * Generated EO class for Employee
 *
 * @version 1
 */
public class Employee_EO extends EOObject {

	public static final String META_XSD_VERSION = "2.0"; // META VERSION
	public static final int COLUMN_COUNT = 6; // total number of columns, i.e., attributes
	public static final int ENTITY_ID = 101; // the entity type id. 
	public static final String SYSTEM_NAME = "Employee"; // the entity system name. 
	public static final String TABLE_NAME = "Data_Employee"; // the table name. 

	// Property names 
	public static final String ATTR_employee_ID = "employee_ID"; // Primary key
	public static final String ATTR_version = "version"; // Version
	public static final String ATTR_status = "status"; // EO status
	public static final String ATTR_ORG_ID = "ORG_ID"; // Organization
	public static final String ATTR_nameFull = "nameFull";
	public static final String ATTR_bornYear = "bornYear";

	public static final String REL_addresses = "addresses";
	public static final String REL_emailAcct = "emailAcct";
	public static final String REL_empProjs = "empProjs";

	/**
	 * Gets Employee ID (Primary key).
	 * @return Employee ID
	 */
	public int getEmployee_ID() {
		return getObject(0) == null ?  -1 : ((Number)getObject(0)).intValue(); 
	}

	/**
	 * Sets Employee ID (Primary key).
	 * @param employee_ID Employee ID
	 */
	public void setEmployee_ID(int employee_ID) {
		setObject(0, Integer.valueOf(employee_ID)); 
	}

	/**
	 * Gets Version (Version).
	 * @return Version
	 */
	public int getVersion() {
		return getObject(1) == null ?  -1 : ((Number)getObject(1)).intValue(); 
	}

	/**
	 * Sets Version (Version).
	 * @param version Version
	 */
	public void setVersion(int version) {
		setObject(1, Integer.valueOf(version)); 
	}

	/**
	 * Gets Status (EO status).
	 * @return Status
	 */
	public int getStatus() {
		return getObject(2) == null ? (byte)-1 : ((Number)getObject(2)).intValue(); 
	}

	/**
	 * Sets Status (EO status).
	 * @param status Status
	 */
	public void setStatus(int status) {
		setObject(2, Integer.valueOf(status)); 
	}

	/**
	 * Gets Org ID (Organization).
	 * @return Org ID
	 */
	public int getORG_ID() {
		return getObject(3) == null ?  -1 : ((Number)getObject(3)).intValue(); 
	}

	/**
	 * Sets Org ID (Organization).
	 * @param ORG_ID Org ID
	 */
	public void setORG_ID(int ORG_ID) {
		setObject(3, Integer.valueOf(ORG_ID)); 
	}

	/**
	 * Gets Full name (Full name).
	 * @return Full name
	 */
	public String getNameFull() {
		String v = getObject(4, String.class); 
		return v;
	}

	/**
	 * Sets Full name (Full name).
	 * @param nameFull Full name
	 */
	public void setNameFull(String nameFull) {
		setObject(4, nameFull); 
	}

	/**
	 * Gets Born year (Born year).
	 * @return Born year
	 */
	public int getBornYear() {
		return getObject(5) == null ?  -1 : ((Number)getObject(5)).intValue(); 
	}

	/**
	 * Sets Born year (Born year).
	 * @param bornYear Born year
	 */
	public void setBornYear(int bornYear) {
		setObject(5, Integer.valueOf(bornYear)); 
	}

	// -------------------------------------- Relationships --------------------------------------

	/**
	 * [INVERSE] (Complement rel: Address.employee) Gets the collection of Address in addresses
	 * null - null
	 * 
	 * @return the collection of Address in addresses
	 */
	public List<EOObject> getAddresses() { 
		return getRelationshipTargetObjectsList("addresses"); 
	}

	/**
	 * [INVERSE] (Complement rel: Address.employee) Adds the specified Address.
	 * null - null
	 * 
	 * @param address The Address to be added.
	 * @return <code>true</code> if added successfully; <code>false</code> if the specified item already in the collection.
	 */
	public boolean addToAddresses(EOObject address) {
		return addRelationshipTargetObject("addresses", address);
	}

	/**
	 * [INVERSE] (Complement rel: Address.employee) Adds the specified Address and optionally updates the complement relationship object. 
	 * null - null
	 * 
	 * @param address The Address to be added.
	 * @param updateComplementRelationship Whether to update the target object of the complement to-one relationship object to this object.
	 * @return <code>true</code> if added successfully; <code>false</code> if the specified item already in the collection.
	 */
	public boolean addToAddresses(EOObject address, boolean updateComplementRelationship) {
		return addRelationshipTargetObject("addresses", address, updateComplementRelationship);
	}

	/**
	 * [INVERSE] (Complement rel: Address.employee) Removes the specified Address.
	 * null - null
	 * 
	 * @param address The Address to be removed.
	 * @return <code>true</code> if removed successfully; <code>false</code> if the specified item was not in the collection.
	 */
	public boolean removeFromAddresses(EOObject address) {
		return removeRelationshipTargetObject("addresses", address);
	}

	/**
	 * [INVERSE] (Complement rel: Address.employee) Removes the specified Address and optionally updates the complement relationship object. 
	 * null - null
	 * 
	 * @param address The Address to be removed.
	 * @param updateComplementRelationship Whether to update the target object of the complement to-one relationship object to null.
	 * @return <code>true</code> if removed successfully; <code>false</code> if the specified item was not in the collection.
	 */
	public boolean removeFromAddresses(EOObject address, boolean updateComplementRelationship) {
		return removeRelationshipTargetObject("addresses", address, updateComplementRelationship);
	}

	/**
	 * [INVERSE] (Complement rel: EmailAccount.employee) Gets the specified EmailAccount.
	 * null - null
	 * 
	 * @param emailAccount The EmailAccount.
	 */
	public EmailAccount getEmailAcct() {
		return (EmailAccount)getRelationshipTargetObject("emailAcct"); 
	}


	/**
	 * [INVERSE] (Complement rel: EmailAccount.employee) Sets the specified EmailAccount.
	 * null - null
	 * 
	 * @return The EmailAccount.
	 */
	public boolean setEmailAcct(EmailAccount emailAccount) { 
		return setRelationshipTargetObject("emailAcct", emailAccount);
	}

	/**
	 * [INVERSE] (Complement rel: EmpProj.employee) Gets the collection of EmpProj in empProjs
	 * null - null
	 * 
	 * @return the collection of EmpProj in empProjs
	 */
	public List<EOObject> getEmpProjs() { 
		return getRelationshipTargetObjectsList("empProjs"); 
	}

	/**
	 * [INVERSE] (Complement rel: EmpProj.employee) Adds the specified EmpProj.
	 * null - null
	 * 
	 * @param empProj The EmpProj to be added.
	 * @return <code>true</code> if added successfully; <code>false</code> if the specified item already in the collection.
	 */
	public boolean addToEmpProjs(EOObject empProj) {
		return addRelationshipTargetObject("empProjs", empProj);
	}

	/**
	 * [INVERSE] (Complement rel: EmpProj.employee) Adds the specified EmpProj and optionally updates the complement relationship object. 
	 * null - null
	 * 
	 * @param empProj The EmpProj to be added.
	 * @param updateComplementRelationship Whether to update the target object of the complement to-one relationship object to this object.
	 * @return <code>true</code> if added successfully; <code>false</code> if the specified item already in the collection.
	 */
	public boolean addToEmpProjs(EOObject empProj, boolean updateComplementRelationship) {
		return addRelationshipTargetObject("empProjs", empProj, updateComplementRelationship);
	}

	/**
	 * [INVERSE] (Complement rel: EmpProj.employee) Removes the specified EmpProj.
	 * null - null
	 * 
	 * @param empProj The EmpProj to be removed.
	 * @return <code>true</code> if removed successfully; <code>false</code> if the specified item was not in the collection.
	 */
	public boolean removeFromEmpProjs(EOObject empProj) {
		return removeRelationshipTargetObject("empProjs", empProj);
	}

	/**
	 * [INVERSE] (Complement rel: EmpProj.employee) Removes the specified EmpProj and optionally updates the complement relationship object. 
	 * null - null
	 * 
	 * @param empProj The EmpProj to be removed.
	 * @param updateComplementRelationship Whether to update the target object of the complement to-one relationship object to null.
	 * @return <code>true</code> if removed successfully; <code>false</code> if the specified item was not in the collection.
	 */
	public boolean removeFromEmpProjs(EOObject empProj, boolean updateComplementRelationship) {
		return removeRelationshipTargetObject("empProjs", empProj, updateComplementRelationship);
	}

}

/********************* DO NOT MODIFY - ATHENA CODE GENERATION LOG *******************
 * @file_type EO CLASS for Java - Java 5
 * @entity_id 101
 * @entity_classname com.test.Employee
 * @entity_fingerprint 6a4889a2c04ecd1f4f84cf7cb9e5655a
 * @entity_version 1
 * @generated_on 1289184439364
 * @generated_by Jack
 * @generated_platform Windows 7 6.1 [x86]
 ******************************************************************************/